<?php

namespace Castor\Stub;

use Castor\Console\Application;
use PhpParser\NodeTraverser;
use PhpParser\ParserFactory;
use PhpParser\PrettyPrinter\Standard;
use Psr\Log\LoggerInterface;
use Psr\Log\NullLogger;
use Symfony\Component\Finder\Finder;

/** @internal */
final class StubsGenerator
{
    public function __construct(
        private readonly string $rootDir,
        private readonly LoggerInterface $logger = new NullLogger(),
    ) {
    }

    public function generateStubsIfNeeded(): void
    {
        if (null !== $dest = $this->shouldGenerate()) {
            $this->logger->debug('Generating stubs...');
            $this->generateStubs($dest);
        }
    }

    private function generateStubs(string $dest): void
    {
        if (!is_writable(\dirname($dest))) {
            $this->logger->warning("Could not generate stubs as the destination \"{$dest}\" is not writeable.");

            return;
        }

        $basePath = \dirname(__DIR__, 2);
        $finder = new Finder();

        $finder
            ->files()
            ->in("{$basePath}/src")
            ->name('*.php')
            ->sortByName()
        ;

        $parser = (new ParserFactory())->create(ParserFactory::PREFER_PHP7);
        $stmts = [];

        $traverser = new NodeTraverser();
        $traverser->addVisitor(new NodeVisitor());

        foreach ($finder as $file) {
            $fileStmts = $parser->parse((string) file_get_contents($file->getPathname()));
            if (!$fileStmts) {
                continue;
            }
            $stmts = array_merge($stmts, $traverser->traverse($fileStmts));
        }

        // Add some very frequently used classes
        $frequentlyUsedClasses = [
            \Symfony\Component\Console\Application::class,
            \Symfony\Component\Console\Completion\CompletionInput::class,
            \Symfony\Component\Console\Input\InputArgument::class,
            \Symfony\Component\Console\Input\InputInterface::class,
            \Symfony\Component\Console\Input\InputOption::class,
            \Symfony\Component\Console\Output\OutputInterface::class,
            \Symfony\Component\Console\Style\SymfonyStyle::class,
            \Symfony\Component\Filesystem\Exception\ExceptionInterface::class,
            \Symfony\Component\Filesystem\Filesystem::class,
            \Symfony\Component\Filesystem\Path::class,
            Finder::class,
            \Symfony\Component\Finder\SplFileInfo::class,
            \Symfony\Component\Process\Exception\ExceptionInterface::class,
            \Symfony\Component\Process\ExecutableFinder::class,
            \Symfony\Component\Process\Process::class,
            \Symfony\Contracts\HttpClient\Exception\ExceptionInterface::class,
            \Symfony\Contracts\HttpClient\HttpClientInterface::class,
            \Symfony\Contracts\HttpClient\ResponseInterface::class,
        ];

        foreach ($frequentlyUsedClasses as $class) {
            $file = (new \ReflectionClass($class))->getFileName();
            if (!$file) {
                continue;
            }
            $fileStmts = $parser->parse((string) file_get_contents($file));
            if (!$fileStmts) {
                continue;
            }
            $stmts = array_merge($stmts, $traverser->traverse($fileStmts));
        }

        array_unshift($stmts, new \PhpParser\Node\Stmt\Nop([
            'comments' => [
                new \PhpParser\Comment\Doc(\sprintf('// castor version: %s', Application::VERSION)),
                new \PhpParser\Comment\Doc('// This file has been generated by castor. Do not edit it manually.'),
                new \PhpParser\Comment\Doc('// It helps IDEs to provide better autocompletion and analysis.'),
                new \PhpParser\Comment\Doc('// You can safely ignore this file in your VCS.'),
                new \PhpParser\Comment\Doc('// ".castor.stub.php" by default is in the same location of "castor.php".'),
                new \PhpParser\Comment\Doc('// You can also move this file at the root of your project or to ".castor/.castor.stub.php".'),
                new \PhpParser\Comment\Doc(''),
            ],
        ]));

        $code = (new Standard())->prettyPrintFile($stmts);

        file_put_contents($dest, $code);
    }

    private function shouldGenerate(): ?string
    {
        // Do not generate stubs when working on castor
        if (($cwd = getcwd()) && str_starts_with(\dirname(__DIR__, 2), $cwd)) {
            return null;
        }

        $files = [
            $this->rootDir . '/.castor.stub.php',
            $this->rootDir . '/.castor/.castor.stub.php',
        ];

        foreach ($files as $file) {
            if (file_exists($file)) {
                return $this->isOutdated($file) ? $file : null;
            }
        }

        $generateLocation = $files[0];
        if (file_exists($this->rootDir . '/.castor/castor.php')) {
            $generateLocation = $files[1];
        }

        return $generateLocation;
    }

    private function isOutdated(string $file): bool
    {
        $content = (string) file_get_contents($file);
        preg_match('{^// castor version: (.+)$}m', $content, $matches);
        if (!$matches) {
            return true;
        }

        return Application::VERSION !== $matches[1];
    }
}
